/**
 * generated by Xtext 2.13.0
 */
package org.example.entities.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.formatting2.IHiddenRegionFormatter;
import org.eclipse.xtext.formatting2.regionaccess.ISemanticRegion;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.example.entities.entities.Attribute;
import org.example.entities.entities.AttributeType;
import org.example.entities.entities.ElementType;
import org.example.entities.entities.EntitiesPackage;
import org.example.entities.entities.Entity;
import org.example.entities.entities.Model;
import org.example.entities.services.EntitiesGrammarAccess;

@SuppressWarnings("all")
public class EntitiesFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private EntitiesGrammarAccess _entitiesGrammarAccess;
  
  /**
   * Insert two newlines after each entity so that entities will be separated
   * by an empty line;
   * after the last entity,
   * we want a single empty line.
   */
  protected void _format(final Model model, @Extension final IFormattableDocument document) {
    final Entity lastEntity = IterableExtensions.<Entity>last(model.getEntities());
    EList<Entity> _entities = model.getEntities();
    for (final Entity entity : _entities) {
      {
        document.<Entity>format(entity);
        if ((entity == lastEntity)) {
          final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
            it.setNewLines(1);
          };
          document.<Entity>append(entity, _function);
        } else {
          final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
            it.setNewLines(2);
          };
          document.<Entity>append(entity, _function_1);
        }
      }
    }
  }
  
  protected void _format(final Entity entity, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.surround(this.textRegionExtensions.regionFor(entity).keyword("extends"), _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.surround(this.textRegionExtensions.regionFor(entity).feature(EntitiesPackage.Literals.ENTITY__NAME), _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.surround(this.textRegionExtensions.regionFor(entity).feature(EntitiesPackage.Literals.ENTITY__SUPER_TYPE), _function_2);
    final ISemanticRegion open = this.textRegionExtensions.regionFor(entity).keyword(this._entitiesGrammarAccess.getEntityAccess().getLeftCurlyBracketKeyword_3());
    final ISemanticRegion close = this.textRegionExtensions.regionFor(entity).keyword(this._entitiesGrammarAccess.getEntityAccess().getRightCurlyBracketKeyword_5());
    boolean _isEmpty = entity.getAttributes().isEmpty();
    if (_isEmpty) {
      final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
        it.noSpace();
      };
      document.surround(close, _function_3);
    } else {
      final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      document.append(open, _function_4);
    }
    final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(open, close, _function_5);
    EList<Attribute> _attributes = entity.getAttributes();
    for (final Attribute attribute : _attributes) {
      {
        document.<Attribute>format(attribute);
        final Procedure1<IHiddenRegionFormatter> _function_6 = (IHiddenRegionFormatter it) -> {
          it.noSpace();
        };
        document.surround(this.textRegionExtensions.regionFor(attribute).keyword(this._entitiesGrammarAccess.getAttributeAccess().getSemicolonKeyword_2()), _function_6);
        final Procedure1<IHiddenRegionFormatter> _function_7 = (IHiddenRegionFormatter it) -> {
          it.setNewLines(1);
        };
        document.append(this.textRegionExtensions.regionFor(attribute).keyword(this._entitiesGrammarAccess.getAttributeAccess().getSemicolonKeyword_2()), _function_7);
      }
    }
  }
  
  protected void _format(final AttributeType attributeType, @Extension final IFormattableDocument document) {
    boolean _isArray = attributeType.isArray();
    if (_isArray) {
      final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
        it.noSpace();
      };
      document.surround(this.textRegionExtensions.regionFor(attributeType).keyword("["), _function);
      final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
        it.noSpace();
      };
      final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
        it.oneSpace();
      };
      document.append(document.prepend(this.textRegionExtensions.regionFor(attributeType).keyword("]"), _function_1), _function_2);
    } else {
      final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
        it.oneSpace();
      };
      document.<ElementType>append(attributeType.getElementType(), _function_3);
    }
  }
  
  public void format(final Object attributeType, final IFormattableDocument document) {
    if (attributeType instanceof XtextResource) {
      _format((XtextResource)attributeType, document);
      return;
    } else if (attributeType instanceof AttributeType) {
      _format((AttributeType)attributeType, document);
      return;
    } else if (attributeType instanceof Entity) {
      _format((Entity)attributeType, document);
      return;
    } else if (attributeType instanceof Model) {
      _format((Model)attributeType, document);
      return;
    } else if (attributeType instanceof EObject) {
      _format((EObject)attributeType, document);
      return;
    } else if (attributeType == null) {
      _format((Void)null, document);
      return;
    } else if (attributeType != null) {
      _format(attributeType, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(attributeType, document).toString());
    }
  }
}
