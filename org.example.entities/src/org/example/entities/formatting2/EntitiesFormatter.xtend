/*
 * generated by Xtext 2.13.0
 */
package org.example.entities.formatting2

import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import org.example.entities.entities.Attribute
import org.example.entities.entities.Entity
import org.example.entities.entities.Model
import static org.example.entities.entities.EntitiesPackage.Literals.*
import org.example.entities.services.EntitiesGrammarAccess
import com.google.inject.Inject
import org.example.entities.entities.AttributeType

class EntitiesFormatter extends AbstractFormatter2 {

	@Inject extension EntitiesGrammarAccess

	/*Insert two newlines after each entity so that entities will be separated
	 * by an empty line; 
	 * after the last entity, 
	 * we want a single empty line.*/
	def dispatch void format(Model model, extension IFormattableDocument document) {
		val lastEntity = model.entities.last;
		for (Entity entity : model.getEntities()) {
			entity.format;
			if (entity === lastEntity)
				entity.append[setNewLines(1)]
			else
				entity.append[setNewLines(2)]
		}
	}

	def dispatch void format(Entity entity, extension IFormattableDocument document) {
		entity.regionFor.keyword("extends").surround[oneSpace]; // one space around extends
		entity.regionFor.feature(ENTITY__NAME).surround[oneSpace]; // one space around NAME
		entity.regionFor.feature(ENTITY__SUPER_TYPE).surround[oneSpace]; // one space around SUPER_TYPE
		//
		//
		val open = entity.regionFor.keyword(entityAccess.leftCurlyBracketKeyword_3); // ("{")
		val close = entity.regionFor.keyword(entityAccess.rightCurlyBracketKeyword_5); // ("}")
		//
		// handling newlines between "{" and "}"
		if (entity.attributes.empty)
			close.surround[noSpace]
		else
			open.append[newLine]; // newline after "{"
		//
		// indent within "{" and "}"
		interior(open, close)[indent];
		//
		for (Attribute attribute : entity.getAttributes()) {
			attribute.format;
			/* AVA! 
			 * The order in which the attributes are formatted is important! 
			 * It seems as if the first rule has the highest priority
			 * I don't know why
			 */
			attribute.regionFor.keyword(attributeAccess.semicolonKeyword_2).surround[noSpace]; // no space around ";"
			attribute.regionFor.keyword(attributeAccess.semicolonKeyword_2).append[newLines = 1]; // after every ";" append newLine
		}
	}

//using AttributeType and not Attribute works but why not otherwise I don't know
	def dispatch void format(AttributeType attributeType, extension IFormattableDocument document) {
		if (attributeType.array) {
			attributeType.regionFor.keyword("[").surround[noSpace];
			attributeType.regionFor.keyword("]").prepend[noSpace].append[oneSpace];
		} else {
			attributeType.elementType.append[oneSpace];
		}
	}
}
